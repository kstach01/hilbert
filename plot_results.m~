function [f_raw, f_calc, f_boot] = plot_results ...
    (raw_data, ERSP_mat, ITC_mat, erspboot_mat, itcboot_mat, p_ITC, p_ERSP,...
    corr_mat, channel, freqs, times, time_bins, varargin)

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Function: plot_ITC(raw_data, chan, freqs, times, ITC_data, boot_mat, ...
%           p_mat, corr_mat, time_bins, varargin)
%       By: Kim Stachenfeld, Aug 1 2012                                         
%  Purpose: Plot data produced by function hilbert_itc
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
% Usage:
% >> [f_data, f_ITC, f_bootstrap] = plot_ITC(raw_data, channel, ...
%    freqs, times, ITC_data, boot_mat, p_mat, circ_corr_mat, time_bins);
%
% >> [f_data, f_ITC, f_bootstrap] = plot_ITC(raw_data, channel, ...
%    freqs, times, ITC_data, boot_mat, p_mat, circ_corr_mat, time_bins ...
%    'key1', value1);
%
% Outputs:
%   f_raw     = figure with raw data surface plot. Returns empty matrix if 
%               no plot.
%   f_calc    = figure with either or both surface plot of ITC amplitude 
%               and average intertrial phase angle correlation. Returns 
%               empty matrix if no plot.
%   f_boot    = figure with plot of bootstrap data for ITC data. Returns 
%               empty matrix if no plot.
%
% Required inputs:
% (Note - to omit any input and use default value, input empty matrix, [])
%   raw_data    = [nchan x frames x ntrial] raw continuous data for all
%                 channels and trials. {default: no raw data plot}
%   ERSP_mat    = [nchan x nfreq x frames] ERSP values for each channel,
%                 frequency, and frame. To omit, enter empty matrix [].
%   ITC_mat     = [nchan x nfreq x frames] Complex ITC values for each 
%                 channel, frequency, and frame. To omit, enter empty matrix [].
%   erspboot_mat= [nchan x nfreq x frames] To omit, enter empty matrix [].
%                 {default: no bootstrap plot}, 
%   itcboot_mat = [nchan x nfreq x frames] ITC bootstrap values (std. dev.)
%                 for each channel, frequency, and frame To omit, enter 
%                 empty matrix [].
%                 {default: no bootstrap plot}
%   p_ITC       = [nchan x nfreq x frames] p-value for ITC calculation for
%                 each channel, frame, and frequency bin. {if [] or if 'alpha'
%                 is empty, p-values < alpha are not removed.}
%   p_ERSP      = [nchan x nfreq x frames] p-value for ERSP calculation for
%                 each channel, frame, and frequency bin. {if [] or if 'alpha'
%                 is empty, p-values < alpha are not removed.}
%                 p-value < 0.05 are not removed.}
%   corr_mat    = [nchan x nfreq x nbins] average correlation coefficients of
%                 phase angles for hilbert transformed data in each frequency 
%                 bin. Correlation coefficients are taken over time bins 
%                 specified by time_bins.
%   channel     = channel of data for which plotting is desired {default: 1}
%   freqs       = [nfreq] vector containing limits of frequency bins
%   times       = [frames] vector of times
%   time_bins   = [nbins] vector containing the frame indices at which each 
%                 bin starts. {default: 1:floor(frames/nbins):frames, where
%                 nbins = size(corr_mat, 3)}
%
% Optional inputs:
%   alpha     = [0 0.5] p-value cut off for confidence in ITC. alpha = 0.05
%               is recommended. {default: 0}
%   ntrial    = number of trials {default: size(raw_data,3)}
%   norm_ERSP = [{0}||1] if 1, normalize ERSP vector corresponding to each
%               frequency over time bins. This will help correct for the
%               increase in ERSP with frequency.
%   plot_raw  = [0||{1}] if 1, plot raw data
%   plot_calc = [0||{1}] if 1, plot calculated parameters (ERSP, ITC, phase 
%               angle correlation)  
%   plot_boot = [0||{1}] if 1, plot ITC and ERSP bootstrap values
%
% See also: hilbert_itc

% Optional Inputs:
 g = finputcheck(varargin, {
    'alpha'      'real'      []        0; ...
    'ntrial'     'integer'   []        size(raw_data,3); ...
    'norm_ERSP'  'real'      []        0; ...
    'plot_boot'  'real'      []        1; ...
    'plot_raw '  'real'      []        1; ...
    'plot_calc'  'real'      []        1  ...
    });

% SET DEFAULT OUTPUTS
f_raw = []; f_calc = []; f_boot = []; 

if ~g.plot_raw
    raw_data = [];
end
if ~g.plot_calc
    ERSP_mat = [];
    ITC_mat  = [];
    corr_mat = [];
end
if ~g.plot_boot
    erspboot_mat = [];
    itcboot_mat  = [];
end

%Required Inputs:
if nargin < 7 || isempty(channel)
    channel = 1;
end

isempty_freqs = 0;
if nargin < 8 || isempty(freqs)
    isempty_freqs = 1;
    freqs = .5:.5+max([size(ITC_mat,2); size(boot_mat,2); size(corr_mat,2)]);
    % use max in case one of the inputs is empty. If all are empty, freqs
    % will not be used anyway.
    fprintf('No frequency bin data was entered. Bins will be numbered.\n')
end
if nargin < 9 || isempty(times)
    frames = max([size(raw_data,2); size(ITC_mat,3); size(boot_mat,3); size(corr_mat,3)]);
    times = (1:frames) - ceil(frames/2);
    fprintf('No time data was entered. %0g time points generated from %0g to %0g msec.\n', ...
        frames, times(1), times(end));
else
    frames = length(times);    
end

if nargin < 10 || isempty(time_bins) && ~isempty(corr_mat)
    nbins = size(corr_mat,3);
    bin_size = floor(frames/nbins);
    time_bins = 1:bin_size:nbins*bin_size;
end



% FORMAT DATA MATRICES
subplot_no = 0;
subplot_boot = 0;
% raw data
if ~isempty(raw_data)
    plotdata = squeeze(raw_data(channel, :, :));
end
% ITC
if ~isempty(ITC_mat)
    subplot_no = subplot_no + 1;
    plotITCdata = abs(squeeze(ITC_mat(channel, :, :)));
end
if ~isempty(itcboot_mat)
    subplot_boot = subplot_boot + 1;
    plotBootDataITC = squeeze(itcboot_mat(channel, :, :));
    if ~isempty(ITC_mat)
        for i = 1:size(plotITCdata,1)
            for j = 1:size(plotITCdata,2)
                if plotITCdata(i,j) <= g.alpha
                    plotITCdata(i,j) = 0;
                end
            end
        end
    end
end

%ERSP
if ~isempty(erspboot_mat)
    subplot_boot = subplot_boot + 1;
    plotBootDataERSP = squeeze(erspboot_mat(channel, :, :));
        if ~isempty(ERSP_mat)
        for i = 1:size(plotITCdata,1)
            for j = 1:size(plotITCdata,2)
                if plotITCdata(i,j) <= g.alpha
                    plotITCdata(i,j) = 0;
                end
            end
        end
    end
end
% Angle Data
if ~isempty(corr_mat)
    subplot_no = subplot_no + 1;
    plotAngleData = squeeze(corr_mat(channel, :, :));
end

% Clear values from ITC matrix with p-values less than alpha
if g.alpha
    if ~isempty(ITC_mat) && ~isempty(p_ITC)
        plotITCdata(find(abs(p_ITC(channel,:,:)) < g.alpha,1)) = 0;
    end
    if ~isempty(ERSP_mat) && ~isempty(p_ERSP)
        plotERSPdata(find(abs(p_ERSP(channel,:,:)) < g.alpha,1)) = 0;
    end
end
if ~isempty(ERSP_mat)
    subplot_no = subplot_no + 1;
    if g.norm_ERSP
        ERSP_mat = bsxfun(@rdivide, ERSP_mat, sqrt(sum(ERSP_mat.^2,3)));    
    end
    plotERSPdata = 10*log10(squeeze(ERSP_mat(channel, :, :)));
end

% set axes
freq_axis = (freqs(1:end-1)+freqs(2:end))/2;
time_axis = times;

%plot Raw Data
if ~isempty(plotdata)
    f_raw = figure;
    surfc(time_axis, 1:g.ntrial, plotdata', 'LineStyle', 'none');
    view([0,0,1]);
    xlim([0 frames]);
    ylim([1 g.ntrial]);
    title('Raw data');
    xlabel('Time (msec)');
    ylabel('Trial no.');
    colormap(jet)
    colorbar('location', 'EastOutside');
    set(gca, 'xLim', [-2000 2000]);
    set(gca, 'yLim', [1 g.ntrial]);
end

if subplot_no
    f_calc = figure;
    n_plotted = 0;
end
%plot ERSP data
if ~isempty(ERSP_mat)
    n_plotted = n_plotted + 1;
    subplot(subplot_no,1,n_plotted);
    surfc(time_axis, freq_axis, plotERSPdata, 'LineStyle', 'none');
    view(2);
    xlim([0 frames]);
    ylim([freq_axis(1) freq_axis(end)]);
    title('ERSP (dB)');
    xlabel('Time (msec)');
    if ~isempty_freqs
        ylabel('Frequency (Hz)');
    else
        ylabel('Frequency bin');
    end
    colormap(jet)
    colorbar('location', 'EastOutside');
    set(gca, 'xLim', [times(1) times(end)]);
    set(gca, 'yLim', [freq_axis(1) freq_axis(end)]);
end

%plot ITC data
if ~isempty(ITC_mat)
    n_plotted = n_plotted + 1;
    subplot(subplot_no,1,n_plotted);
    surfc(time_axis, freq_axis, plotITCdata, 'LineStyle', 'none');
    view(2);
    xlim([0 frames]);
    ylim([freq_axis(1) freq_axis(end)]);
    xlabel('Time (msec)');
    if ~isempty_freqs
        ylabel('Frequency (Hz)');
    else
        ylabel('Frequency bin');
    end
    title('ITC amplitude');
    colormap(jet)
    caxis([0 0.75])
    colorbar('location', 'EastOutside');
    set(gca, 'xLim', [times(1) times(end)]);
    set(gca, 'yLim', [freq_axis(1) freq_axis(end)]);
end

%plot angle correlation data
if ~isempty(corr_mat)
    n_plotted = n_plotted + 1;
    subplot(subplot_no,1,n_plotted);
    surfc(time_bins-2000, freq_axis, plotAngleData, 'LineStyle', 'none');
    view(2);
    title('Phase angle correlation');
    xlabel('Time (msec)')
    if ~isempty_freqs
        ylabel('Frequency (Hz)');
    else
        ylabel('Frequency bin');
    end    
    xlim([0 frames]);
    ylim([freq_axis(1) freq_axis(end)]);
    colormap(jet)
    
    colorbar('location', 'EastOutside');
    set(gca, 'xLim', [time_bins(1) time_bins(end)]-2000);
    set(gca, 'yLim', [freq_axis(1) freq_axis(end)]);
end

legend_str = cell(length(freq_axis),1);
for i = 1:length(freqs)-1
    legend_str{i} = sprintf('%0.2g - %0.2g Hz', round(freqs(i)), round(freqs(i+1)));
end

%Plot bootstrap data
if subplot_boot
    f_boot = figure;
    n_plotted = 0;
end

if ~isempty(erspboot_mat)
    n_plotted = n_plotted+1;
    subplot(subplot_boot,1,n_plotted); 
    plot(time_axis, plotBootDataERSP);
    title('Bootstrap values for ERSP');
    ylabel('Bootstrap standard deviation')
    xlabel('Time (ms)');
    xlim([times(1) times(end)]);
    legend(legend_str, 'Location', 'EastOutside');
end

if ~isempty(itcboot_mat)
    n_plotted = n_plotted+1;
    subplot(subplot_boot,1,n_plotted); 
    plot(time_axis, plotBootDataITC);
    title('Bootstrap values for ITC');
    xlabel('Time (ms)');
    ylabel('Bootstrap standard deviation')
    xlim([times(1) times(end)]);
    legend(legend_str, 'Location', 'EastOutside');
end



end

